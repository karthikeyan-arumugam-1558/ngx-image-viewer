import { OnInit, EventEmitter, ElementRef } from '@angular/core';
import { ImageViewerConfig, CustomEvent } from './image-viewer-config.model';
import { SafeResourceUrl, SafeUrl } from '@angular/platform-browser';
import * as i0 from "@angular/core";
export declare class ImageViewerComponent implements OnInit {
    private document;
    moduleConfig: ImageViewerConfig;
    src: (string | SafeResourceUrl | SafeUrl)[];
    index: number;
    config: ImageViewerConfig;
    indexChange: EventEmitter<number>;
    configChange: EventEmitter<ImageViewerConfig>;
    customEvent: EventEmitter<CustomEvent>;
    fullscreenElement: ElementRef;
    style: {
        transform: string;
        msTransform: string;
        oTransform: string;
        webkitTransform: string;
    };
    private fullscreen;
    loading: boolean;
    private scale;
    private rotation;
    private translateX;
    private translateY;
    private prevX;
    private prevY;
    private hovered;
    constructor(document: any, moduleConfig: ImageViewerConfig);
    ngOnInit(): void;
    checkFullscreenmode(e: any): void;
    nextImage(event: any): void;
    prevImage(event: any): void;
    zoomIn(): void;
    zoomOut(): void;
    scrollZoom(evt: WheelEvent): boolean;
    rotateClockwise(): void;
    rotateCounterClockwise(): void;
    onLoad(): void;
    onLoadStart(): void;
    onDragOver(evt: any): void;
    onDragStart(evt: any): void;
    toggleFullscreen(): void;
    openFullscreen(): void;
    closeFullscreen(): void;
    triggerIndexBinding(): void;
    triggerConfigBinding(): void;
    fireCustomEvent(name: any, imageIndex: any): void;
    reset(): void;
    onMouseOver(): void;
    onMouseLeave(): void;
    private canNavigate;
    private updateStyle;
    private mergeConfig;
    static ɵfac: i0.ɵɵFactoryDeclaration<ImageViewerComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ImageViewerComponent, "ngx-image-viewer", never, { "src": { "alias": "src"; "required": false; }; "index": { "alias": "index"; "required": false; }; "config": { "alias": "config"; "required": false; }; }, { "indexChange": "indexChange"; "configChange": "configChange"; "customEvent": "customEvent"; }, never, never, false, never>;
}
